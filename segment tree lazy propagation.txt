#include <bits/stdc++.h>
#define ll long long
#define pb push_back
#define mp make_pair
#define fast ios_base::sync_with_stdio(false); cin.tie(0);cout.tie(0);
#define filein freopen("input.txt","r",stdin)
#define fileout freopen("output.txt","w",stdout)
using namespace std;
const int n=5;
int ara[n];
int tree[n*4];
int lazy[n*4];
void init(int node,int b, int e)
{
    if(b==e)
    {
        tree[node]=ara[b-1];
        return ;
    }
    int mid=(b+e)>>1;
    int left=node<<1;
    int right=left+1;
    init(left, b,mid);
    init(right,mid+1,e);
    tree[node]=tree[left]+tree[right];
}
void update(int node,int b, int e, int i, int j,int value)
{
    if(lazy[node])
    {
        tree[node]+=(e-b+1)*lazy[node];
        if(b!=e)
        {
            lazy[node*2]+=lazy[node];
            lazy[node*2+1]+=lazy[node];
        }
        lazy[node]=0;
    }
    if(e<i or b>j) return ;
    if(b>=i and e<=j)
    {
        tree[node]+=(e-b+1)*value;
        if(b!=e)
        {
            lazy[node*2]+=value;
            lazy[node*2+1]+=value;
        }
        return ;
    }
    int mid=(b+e)>>1;
    int left=node<<1;
    int right=left+1;
    update(left, b,mid,i,j,value);
    update(right,mid+1,e,i,j,value);
    tree[node]=tree[left]+tree[right];
}
int  query(int node,int b, int e, int i,int j)
{
    if(lazy[node])
    {
        tree[node]+=(e-b+1)*lazy[node];
        if(b!=e)
        {
            lazy[node*2]+=lazy[node];
            lazy[node*2+1]+=lazy[node];
        }
        lazy[node]=0;
    }
    if(e<i or b>j) return 0;
    if(b>=i and e<=j)
    {
        return tree[node];
    }
    int mid=(b+e)>>1;
    int left=node<<1;
    int right=left+1;
    int x=query(left, b,mid,i,j);
    int y=query(right,mid+1,e,i,j);
    return x+y;
}
int  main()
{
        for(int i=0;i<n;i++) cin>>ara[i];
        init(1,1,n);
        update(1,1,n,1,2,10);
        cout<<query(1,1,n,1,1)<<endl;
}
